
[[language]]
name = "rust"

[language.config.hints]
assignVariableTypes = true
compositeLiteralFields = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true


# [language-server]
# emmet-ls = { command = "emmet-ls", args = [ "--stdio" ]}

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
# codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
# format = { enable = true }
nodePath = ""
# quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {useFlatConfig = false}
problems = { shortenToSingleLine = false }

# [language-server.eslint.config.codeAction]
# disableRuleComment = { enable = true, location = "separateLine" }
# showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true


# TODO: Replace ts-langserver with Deno?
[[language]]
name = "typescript"
# language-servers = [ "typescript-language-server", "eslint", "emmet-ls" ]
language-servers = [ "typescript-language-server", "eslint" ]
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "typescript" ] }
# auto-format = true

[[language]]
name = "tsx"
language-servers = [ "deno", "eslint", "emmet-ls" ]
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "tsx" ] }
# auto-format = true

[[language]]
name = "javascript"
# language-servers = [ "typescript-language-server", "eslint", "emmet-ls" ]
language-servers = [ "typescript-language-server", "eslint" ]
formatter = { command = "dprint", args = [ "fmt", "--stdin", "javascript" ] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "eslint", "emmet-ls" ]
formatter = { command = "dprint", args = [ "fmt", "--stdin", "jsx" ] }
auto-format = true

[[language]]
name = "json"
formatter = { command = "dprint", args = [ "fmt", "--stdin", "json" ] }
auto-format = true

[[language]]
name = "html"
# language-servers = [ "vscode-html-language-server", "emmet-ls" ]
language-servers = [ "vscode-html-language-server" ]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "css"
# language-servers = [ "vscode-css-language-server", "emmet-ls" ]
language-servers = [ "vscode-css-language-server" ]
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true

# [[language]]
# name = "protobuf"
# auto-format = true

# [[grammar]]
# name = "protobuf"
# source = { git = "https://github.com/yusdacra/tree-sitter-protobuf", rev = "19c211a01434d9f03efff99f85e19f967591b175"}

# [[language]]
# name = "html"
# formatter = { command = 'prettier', args = ["--parser", "html"] }

# [[language]]
# name = "json"
# formatter = { command = 'prettier', args = ["--parser", "json"] }

# [[language]]
# name = "css"
# formatter = { command = 'prettier', args = ["--parser", "css"] }

# [[language]]
# name = "javascript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
# auto-format = true

# [[language]]
# name = "typescript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
# auto-format = true

# [[language]]
# name = "tsx"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
# auto-format = true

# languages.toml
[[language]]
name = "markdown"
formatter = { command = "dprint", args = ["fmt", "--stdin", "md"]}

# Enable this when multi-lsp's get pushed to live
# [[language]]
#  name = "typescript"
#  language-servers = [  "typescript-language-server", "tailwindcss-react", "eslint"]
#  formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
#  auto-format = true

#  [[language]]
#  name = "tsx"
#  language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-language-server"]
#  formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
#  auto-format = true

#  [[language]]
#  name = "jsx"
#  language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint"]
#  grammar = "javascript"
#  formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
#  auto-format = true

#  [[language]]
#  name = "javascript"
#  language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint"]
#  formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
#  auto-format = true

#  [[language]]
#  name = "json"
#  language-servers = [ "vscode-json-language-server" ]
#  formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
#  auto-format = true

#  [language-server.vscode-json-language-server.config]
#  json = { validate = { enable = true }, format = { enable = true } }
#  provideFormatter = true

#  [language-server.vscode-css-language-server.config]
#  css = { validate = { enable = true } }
#  scss = { validate = { enable = true } }
#  less = { validate = { enable = true } }
#  provideFormatter = true

#  [[language]]
#  name = "html"
#  formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
#  language-servers = [ "vscode-html-language-server", "tailwindcss-react","emmet-language-server"]
 
#  [[language]]
#  name = "css"
#  formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
#  language-servers = [ "vscode-css-language-server", "tailwindcss-react"]

#  [language-server.eslint]
#  args = ["--stdio"]
#  command = "vscode-eslint-language-server"

#  [language-server.eslint.config]
#  format = true
#  nodePath = ""
#  onIgnoredFiles = "off"
#  packageManager = "yarn"
#  quiet = false
#  rulesCustomizations = []
#  run = "onType"
#  useESLintClass = false
#  validate = "on"
#  codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
#  codeActionOnSave = { mode = "all" }
#  experimental = { }
#  problems = { shortenToSingleLine = false }
#  workingDirectory = { mode = "auto" }

#  [language-server.emmet-language-server]
#  command="emmet-language-server"
#  args = ["--stdio"]


#  [language-server.tailwindcss-react]
#  language-id = "typescriptreact"
#  command = "tailwindcss-language-server"
#  args = ["--stdio"]
#  config = {}

#  [language-server.typescript-language-server.config]
#  documentFormatting = false
#  hostInfo = "helix"

#  [language-server.typescript-language-server.config.typescript.inlayHints]
#  includeInlayEnumMemberValueHints = true
#  includeInlayFunctionLikeReturnTypeHints = true
#  includeInlayFunctionParameterTypeHints = true
#  includeInlayParameterNameHints = "all"
#  includeInlayParameterNameHintsWhenArgumentMatchesName = true
#  includeInlayPropertyDeclarationTypeHints = true
#  includeInlayVariableTypeHints = true

#  [language-server.typescript-language-server.config.completions]
# completeFunctionCalls = true

#  [language-server.typescript-language-server.config.javascript.inlayHints]
#  includeInlayEnumMemberValueHints = true
#  includeInlayFunctionLikeReturnTypeHints = true
#  includeInlayFunctionParameterTypeHints = true
#  includeInlayParameterNameHints = "all"
#  includeInlayParameterNameHintsWhenArgumentMatchesName = true
#  includeInlayPropertyDeclarationTypeHints = true
#  includeInlayVariableTypeHints = true