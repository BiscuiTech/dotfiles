[[language]]
name = "rust"

# [language-server.rust-analyzer]
# config = { procMacro = { ignored = { leptos_macro = ["component", "server"] } } }

# [language.config.hints]
# assignVariableTypes = true
# compositeLiteralFields = true
# constantValues = true
# functionTypeParameters = true
# parameterNames = true
# rangeVariableTypes = true

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
# codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
# format = { enable = true }
nodePath = ""
# quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {useFlatConfig = false}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = true }

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "fixAll"

[language-server.eslint.config.workingDirectory]
mode = "location"

[language-server.typescript-language-server]
args = ["--stdio"]
command = "typescript-language-server"

[language-server.typescript-language-server.config]
documentFormatting = false

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "typescript"
scope = "source.ts"
injection-regex = "(ts|typescript)"
language-servers = [ "typescript-language-server", "eslint" ]
# language-servers = [ { except-features = ["format"], name = "typescript-language-server" }, "eslint" ]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "typescript" ] }
auto-format = true
file-types = ["ts", "mts", "cts"]

[[language]]
name = "tsx"
language-servers = [ "typescript-language-server", "eslint" ]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "tsx" ] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [ "typescript-language-server", "eslint" ]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "javascript" ] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "eslint" ]
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
# formatter = { command = "dprint", args = [ "fmt", "--stdin", "jsx" ] }
auto-format = true

[[language]]
name = "json"
formatter = { command = "dprint", args = [ "fmt", "--stdin", "json" ] }
auto-format = true

[[language]]
name = "html"
language-servers = [ "vscode-html-language-server" ]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server" ]
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true

# [[language]]
# name = "protobuf"
# auto-format = true

# [[grammar]]
# name = "protobuf"
# source = { git = "https://github.com/yusdacra/tree-sitter-protobuf", rev = "19c211a01434d9f03efff99f85e19f967591b175"}

[[language]]
name = "markdown"
formatter = { command = "dprint", args = ["fmt", "--stdin", "md"]}
